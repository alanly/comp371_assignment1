#version 330 core


// Light and Material Uniform Variables
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent

uniform vec3 LightColors[2];
uniform vec3 LightAttenuations[2];


// Inputs
in vec3 v_color;		 // vertex color: also diffuse color

in vec3 normal;          // Transformed normal in View Space
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector[2];     // Vector from the vertex to the Light in View Space
						 // Length of lightVector is the distance between light and vertex
						 // if w = 1: Point light, if w = 0: directional light

// Ouput data
out vec3 color;


void main()
{
	// Implment Phong Shading based on the parameters above
	// Remember that directional light don't have attenuation

	// Declare our values
	float lightDistance;
	vec3  fragmentColor;
	vec3  lightDirection;
	vec3  normalDirection = normalize(normal);
	vec3  eyeDirection    = normalize(eyeVector);

	vec3 lightIntensity;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	// Calculate each light's effects on this fragment.
	for (int i = 0; i < 2; i++)
	{
		// Calculate light specific values,
		lightDistance = length(vec3(lightVector[i]));
		lightDirection = normalize(vec3(lightVector[i]));

		// Calculate our attenuation co-efficient.
		float attenuation = 1.f; // 1 is no attenuation

		if (lightVector[i].w > 0) { // Unless it's a directional light...
			attenuation = 1.f / (LightAttenuations[i].x + (LightAttenuations[i].y * lightDistance) + (LightAttenuations[i].z * lightDistance * lightDistance));
		}

		// Calculate the light intensity factor for diffuse and specular contributions.
		lightIntensity = attenuation * LightColors[i];
		
		// Calculate our ambient light factor.
		ambient = LightColors[i] * materialCoefficients.x;

		// Calculate our diffused light factor.
		diffuse = lightIntensity * materialCoefficients.y * max(0.f, dot(normalDirection, lightDirection));

		// Check if we need to calculate the specular factor.
		if (dot(normalDirection, lightDirection) > 0) {
			// Calculate our reflection vector first,
			vec3 reflection = normalize(reflect(-lightDirection, normalDirection));

			specular = lightIntensity * materialCoefficients.z * pow(max(0.f, dot(reflection, eyeDirection)), materialCoefficients.w);
		}
		
		// Add up our contributions.
		fragmentColor = fragmentColor + ambient + diffuse + specular;
	}

	color = fragmentColor * v_color;
}
